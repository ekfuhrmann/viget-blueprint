---
import type { HTMLAttributes, ComponentProps } from 'astro/types'
import Button from '@/components/elements/Button.astro'
import close from '@/assets/svg/close.svg?raw'

interface Props extends HTMLAttributes<'dialog'> {
  /*
    Whether or not the close button should be hidden.
  */
  hideClose?: boolean
  /*
    The trigger button props.
  */
  triggerProps?: ComponentProps<typeof Button>
}

const {
  hideClose = false,
  triggerProps,
  class: className,
  ...attrs
} = Astro.props
---

<div
  data-component="Dialog"
  x-data=`{
    open: false,

    // Close the dialog when the user clicks backdrop
    handleDialogClick(event) {
      (event.target === $refs.dialogRef) && this.handleDialogClose()
    },

    // Delay close to allow for animation
    handleDialogClose() {
      if (!this.open) return

      this.open = false
      $refs.dialogRef.dataset.dialogStatus = 'closing'

      setTimeout(() => {
        delete $refs.dialogRef.dataset.dialogStatus
        $refs.dialogRef.close()
      }, 300);
    }
  }`
>
  <!-- trigger -->
  <Button @click="$refs.dialogRef.showModal(), open = true" {...triggerProps}
    ><slot name="trigger">Open Dialog</slot></Button
  >

  <!-- dialog -->
  <dialog
    x-ref="dialogRef"
    x-trap.noscroll="open"
    @keydown.escape.prevent="handleDialogClose()"
    @click="handleDialogClick(event)"
    class:list={['dialog', className]}
    {...attrs}
  >
    {
      !hideClose && (
        <Button
          icon
          size="sm"
          title="Close"
          variant="subtle"
          class="absolute right-4 top-4 size-24 !min-h-0 [&_svg]:size-12"
          @click="handleDialogClose()"
        >
          <Fragment set:html={close} />
          Close
        </Button>
      )
    }
    <slot>
      <div class="flex items-center">
        No content has been provided for this dialog.
      </div>
    </slot>
  </dialog>
</div>
