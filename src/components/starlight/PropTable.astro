---
import { Icon } from '@astrojs/starlight/components'
import Tooltip from '@/components/starlight/tooltip/Tooltip.ts'

interface Row {
  prop: string
  required: boolean
  description?: string
  default?: string
  type: string
  children: [
    {
      prop: string
      required: boolean
      description?: string
      default?: string
      type: string
    },
  ]
}

interface Props {
  rows: Row[]
}

const { rows } = Astro.props

const UUID = crypto.randomUUID()
---

<div
  class="overflow-auto rounded-lg ring-1 ring-inset ring-[var(--sl-color-gray-6)]"
>
  <table class="!table w-full rounded text-left">
    <thead class="bg-gray-100 dark:bg-gray-800">
      <tr>
        <th>Prop</th>
        <th>Type</th>
        <th>Default</th>
      </tr>
    </thead>
    <tbody>
      {
        rows.map((row) => (
          <>
            <tr>
              <td>
                <div class="flex items-center gap-4">
                  <span class="rounded bg-[rgb(from_var(--sl-color-accent)_r_g_b_/_70%)] px-4 text-[var(--sl-color-text-invert)] dark:text-[var(--sl-color-text)]">
                    {row.prop}
                    {row.required && <span title="required">*</span>}
                  </span>
                  <Tooltip.Root name="test">
                    <Tooltip.Trigger>
                      <Icon name="information" />
                    </Tooltip.Trigger>
                    <Tooltip.Content>
                      {Array.isArray(row.description) ? (
                        row.description.map((paragraph) => (
                          <p class="[&+&]:mt-8">{paragraph}</p>
                        ))
                      ) : (
                        <p>{row.description}</p>
                      )}
                    </Tooltip.Content>
                  </Tooltip.Root>
                </div>
              </td>
              <td>
                <code class="break-normal rounded">{row.type}</code>
              </td>
              <td>
                {row.default ? (
                  <code class="whitespace-nowrap rounded">{row.default}</code>
                ) : (
                  '—'
                )}
              </td>
            </tr>
            {row.children &&
              row.children.map((childRow, index) => (
                <tr>
                  <td>
                    <div
                      class:list={[
                        'flex items-center gap-4 pl-12 before:text-sm',
                        {
                          'before:content-["├─"]':
                            index !== row.children.length - 1,
                          'before:content-["└─"]':
                            index === row.children.length - 1,
                        },
                      ]}
                    >
                      <span class="rounded bg-[rgb(from_var(--sl-color-accent)_r_g_b_/_70%)] px-4 text-sm text-[var(--sl-color-text-invert)] dark:text-[var(--sl-color-text)]">
                        {childRow.prop}
                        {childRow.required && <span title="required">*</span>}
                      </span>
                      <Tooltip.Root name="test">
                        <Tooltip.Trigger>
                          <Icon name="information" />
                        </Tooltip.Trigger>
                        <Tooltip.Content>
                          {Array.isArray(childRow.description) ? (
                            childRow.description.map((paragraph) => (
                              <p class="[&+&]:mt-8">{paragraph}</p>
                            ))
                          ) : (
                            <p>{childRow.description}</p>
                          )}
                        </Tooltip.Content>
                      </Tooltip.Root>
                    </div>
                  </td>
                  <td>
                    <code class="break-normal rounded">{childRow.type}</code>
                  </td>
                  <td>
                    {childRow.default ? (
                      <code class="whitespace-nowrap rounded">
                        {childRow.default}
                      </code>
                    ) : (
                      '—'
                    )}
                  </td>
                </tr>
              ))}
          </>
        ))
      }
    </tbody>
  </table>
</div>

<script>
  // Identify `code` blocks from the description and wrap them in a styled `code` block element
  function formatCodeInString(str: string) {
    return str
      .split('`')
      .map((part: any, index: number) => {
        if (index % 2 === 0) {
          return part
        } else {
          return `<code class="bg-[var(--sl-color-bg-inline-code)] -my-2 py-2 px-6 rounded text-xs">${part}</code>`
        }
      })
      .join('')
  }

  const tooltipDescriptions = document.querySelectorAll(
    '[data-tooltip-content] p',
  )

  tooltipDescriptions.forEach((description) => {
    description.innerHTML = formatCodeInString(description.innerHTML)
  })
</script>

<!-- TODO: break styles out to astro classes -->
