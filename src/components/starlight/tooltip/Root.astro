---
interface Props {
  /**
  A unique identifier for the tooltip to bind
  the trigger and the content together
  */
  uuid: string
}

const { uuid } = Astro.props
---

<custom-tooltip class="not-content" uuid={uuid}><slot /></custom-tooltip>

<script>
  import {
    computePosition,
    flip,
    shift,
    offset,
    arrow,
    autoUpdate,
  } from '@floating-ui/dom'

  class Tooltip extends HTMLElement {
    private trigger!: HTMLElement
    private content!: HTMLElement
    private arrow!: HTMLElement
    private cleanup!: () => void

    constructor() {
      super()
      this.setupElements()

      this.cleanup = autoUpdate(this.trigger, this.content, this.create)
    }

    connectedCallback() {
      this.trigger.addEventListener('click', this.toggleListener)
      this.trigger.addEventListener('blur', this.hideListener)
    }

    disconnectedCallback() {
      this.trigger.removeEventListener('click', this.toggleListener)
      this.trigger.removeEventListener('blur', this.hideListener)
    }

    private setupElements() {
      this.trigger = this.querySelector('[data-tooltip-trigger]') as HTMLElement
      this.content = this.querySelector('[data-tooltip-content]') as HTMLElement
      this.arrow = this.querySelector('[data-tooltip-arrow]') as HTMLElement
    }

    private create = () => {
      computePosition(this.trigger, this.content, {
        placement: 'top-start',
        middleware: [
          offset(6),
          flip(),
          shift({ padding: 6 }),
          arrow({ element: this.arrow }),
        ],
      }).then(({ x, y, placement, middlewareData }) => {
        Object.assign(this.content.style, {
          left: `${x}px`,
          top: `${y}px`,
        })

        // Accessing the data
        if (middlewareData.arrow) {
          const { x: arrowX, y: arrowY } = middlewareData.arrow

          const staticSide = {
            top: 'bottom',
            right: 'left',
            bottom: 'top',
            left: 'right',
          }[placement.split('-')[0]]

          if (staticSide) {
            Object.assign(this.arrow.style, {
              left: arrowX != null ? `${arrowX}px` : '',
              top: arrowY != null ? `${arrowY}px` : '',
              right: '',
              bottom: '',
              borderWidth:
                staticSide === 'top'
                  ? '1px 0 0 1px'
                  : staticSide === 'bottom'
                    ? '0 1px 1px 0'
                    : staticSide === 'left'
                      ? '0 1px 1px 0'
                      : '1px 0 0 1px',
              [staticSide]: '-4px',
            })
          }
        }
      })
    }

    private show = () => {
      console.log('show')
      this.content.style.display = 'block'
      this.isVisible = true
      this.create()
    }

    private hide = () => {
      this.content.style.display = 'none'
      this.isVisible = false
      this.cleanup
    }

    private toggle = () => {
      this.isVisible ? this.hide() : this.show()
    }

    private toggleListener: EventListener = () => {
      this.toggle()
    }

    private hideListener: EventListener = () => {
      this.hide()
    }

    private isVisible: boolean = false
  }

  customElements.define('custom-tooltip', Tooltip)

  function cleanup() {
    throw new Error('Function not implemented.')
  }
</script>
